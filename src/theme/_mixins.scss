/**
 * Convert font-size from px to rem with px fallback
 *
 * @param $size - the value in pixel you want to convert
 *
 * e.g. p {@include fontSize(12px);}
 *
 */

// Function for converting a px based font-size to rem.
@function pxToRems($size) {
  $remSize: $size / $baseFontSize;
  //Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin fontSize($size) {
  font-size: pxToRems($size);
}

// hover state mixins
@mixin focusStates() {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}

@mixin gutters() {
  padding-left: pxToRems(16px);
  padding-right: pxToRems(16px);

  @include phone-and-up {
    padding-left: pxToRems(24px);
    padding-right: pxToRems(24px);
  }
}

// media queries
@mixin phone {
  @media (max-width: #{$phone-width - 1px}) {
    @content;
  }
}

@mixin large-phone {
  @media (min-width: #{$phone-width}) and (max-width: #{$tablet-width - 1px}) {
    @content;
  }
}

@mixin phone-and-up {
  @media (min-width: #{$phone-width}) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: #{$tablet-width}) and (max-width: #{$laptop-width - 1px}) {
    @content;
  }
}

@mixin tablet-and-up {
  @media (min-width: #{$tablet-width}) {
    @content;
  }
}

@mixin laptop {
  @media (min-width: #{$laptop-width}) and (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin laptop-and-up {
  @media (min-width: #{$laptop-width}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$desktop-width}) {
    @content;
  }
}