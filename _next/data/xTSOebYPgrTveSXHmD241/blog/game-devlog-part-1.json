{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      h2: \"h2\",\n      h1: \"h1\",\n      ul: \"ul\",\n      li: \"li\"\n    }, _provideComponents(), props.components), {Figure} = _components;\n    if (!Figure) _missingMdxReference(\"Figure\", true);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Hello and welcome to what will be a long running set of posts about my experiences and updates with game development. While I did go to school for software development and had a couple classes about game development, I have never actually dipped my toes into making a full game myself.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"A few of my friends are in the game dev space professionally and somewhat recently one of them started making her own game. After some talking, another friend and I got excited and decided to make our own games so we all could learn and share our progress together. While I've always wanted to try and work on a game, I never had a strong enough initial burst of motivation.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Godot game engine\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This was all happening around the time of Unity pricing fiasco and a topic of discussion that came up a lot in the game dev sphere was Godot. I personally have never heard of Godot before all this, but everyone was talking it up a fair bit. It being totally community driven, having a lot of community support, surprisingly very good documentation, as well as a friend who would be learning it alongside me, we decided why not this is the thing we'll do it in.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"The game idea\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"My basic idea for my game is a 2D platform fighter where the victory condition is to deplete all of the opponent's health rather than getting ring-outs. The arena would be an enclosed space with a lot of focus on combos that can be extended by knocking your opponent into the surrounding boundary.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I'm drawing inspiration from Jump Ultimate Stars, Smash Bros., and, apparently, Guilty Gear. I have played and watched very little Guilty Gear but based on my ideas and talking with my friend, Guilty Gear does some things similarly to them.\"\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"Initial game demo\"\n      }), \"\\n\", _jsx(Figure, {\n        video: \"devlog-initial-game.webm\",\n        caption: \"First playable iteration of my game\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"My first game demo is quite rough around the edges, but it does work.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Features of this version:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"I have a system for making stages quickly with arbitrary platforms & walls\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Players can join and leave a game in an arbitrary order\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"I have a system for creating hitboxes quickly and easily\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Can easily group hitboxes into sets an assign them to a specific attack input\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Players respond to getting hit and are launched based on the strength of the hitbox\"\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"frontMatter":{"title":"Game Devlog - Initial game demo","description":"The beginning of my exploits with game development and Godot.","date":"2023-10-15"},"posts":[{"date":"2023-12-26","slug":"immortality-review"},{"date":"2023-11-25","slug":"game-devlog-part-3"},{"date":"2023-11-06","slug":"game-devlog-part-2"},{"date":"2023-10-15","slug":"game-devlog-part-1"},{"date":"2022-12-29","slug":"celeste-part-3"},{"date":"2022-12-19","slug":"celeste-part-2"},{"date":"2022-12-04","slug":"celeste-part-1"},{"date":"2022-03-26","slug":"tunic-review"},{"date":"2021-08-20","slug":"writing-is-hard"},{"date":"2021-08-04","slug":"mtg-card-seer"},{"date":"2021-07-31","slug":"mtga-july-2021-retrospect"},{"date":"2021-07-29","slug":"deaths-door-review"},{"date":"2021-05-02","slug":"frustrations-of-mtga-client"},{"date":"2021-05-01","slug":"mtga-april-2021-retrospect"},{"date":"2021-04-14","slug":"mtg-deck-archive-2021-04-14"},{"date":"2021-04-12","slug":"strixhaven-historic-shakeup"},{"date":"2021-04-01","slug":"mtga-march-2021-retrospect"},{"date":"2021-03-30","slug":"why-a-blog"}],"slug":"game-devlog-part-1"},"__N_SSG":true}